## knn -reg2
import pandas as pd
import numpy as np
from sklearn.model_selection import cross_val_score, KFold, GridSearchCV
from sklearn.neighbors import KNeighborsRegressor
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
import os

os.chdir(r"C:\Training\Academy\Statistics (Python)\Cases\Concrete Strength")

concrete = pd.read_csv("Concrete_Data.csv")

X = concrete.drop('Strength', axis=1)
y = concrete['Strength']

kfold = KFold(n_splits=5, shuffle=True, random_state=2022)

scaler = StandardScaler()
knn = KNeighborsRegressor()
pipe = Pipeline([('scl_std', scaler), ('knn_model', knn)])
print(pipe.get_params())

params = {'knn_model__n_neighbors':np.arange(1,31)}
gcv = GridSearchCV(pipe, param_grid=params,scoring='r2',
                          cv = kfold)
gcv.fit(X, y)
print(gcv.best_params_)
print(gcv.best_score_)

pd_gcv = pd.DataFrame(gcv.cv_results_)

############# Chemical Process Data ######################
os.chdir(r"C:\Training\Academy\Statistics (Python)\Cases\Chemical Process Data")
from sklearn.impute import SimpleImputer

chem = pd.read_csv("ChemicalProcess.csv")

X = chem.drop('Yield', axis=1)
y = chem['Yield']

imputer = SimpleImputer()
scaler = StandardScaler()
knn = KNeighborsRegressor()

pipe = Pipeline([('imputing',imputer),('scaling', scaler),
                 ('knn_model',knn)])
print(pipe.get_params())
kfold = KFold(n_splits=5, shuffle=True, random_state=2022)
params = {'knn_model__n_neighbors':np.arange(1,31),
          'imputing__strategy':['mean','median']}

gcv = GridSearchCV(pipe, param_grid=params,scoring='r2',
                          cv = kfold, verbose=3)
gcv.fit(X, y)
print(gcv.best_params_)
print(gcv.best_score_)

pd_gcv = pd.DataFrame(gcv.cv_results_)

############### Medical Cost Expenses #############

os.chdir(r"C:\Training\Academy\Statistics (Python)\Cases\Medical Cost Personal")
insure = pd.read_csv("insurance.csv")
dum_insure = pd.get_dummies(insure, drop_first=True)

X = dum_insure.drop('charges', axis=1)
y = dum_insure['charges']

pipe = Pipeline([('scaling', scaler),('knn_model',knn)])

print(pipe.get_params())
kfold = KFold(n_splits=5, shuffle=True, random_state=2022)
params = {'knn_model__n_neighbors':np.arange(1,31)}

gcv = GridSearchCV(pipe, param_grid=params,scoring='r2',
                          cv = kfold, verbose=3)
gcv.fit(X, y)
print(gcv.best_params_)
print(gcv.best_score_)
best_est = gcv.best_estimator_

tst_insure = pd.read_csv("tst_insure.csv")
dum_tst = pd.get_dummies(tst_insure, drop_first=True)

predictions = best_est.predict(dum_tst)
# OR
predictions = gcv.predict(dum_tst)
